package com.rush.doodle.player;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.rush.doodle.exceptions.*;
import com.rush.doodle.room.*;

@Service
public class PlayerService {
	@Autowired
	private PlayerRepository playerRepository;
	@Autowired
	private RoomRepository roomRepository;
	
	public List<Player> getPlayersInRoom(Long roomId) {
		List<Player> players=new ArrayList<>();
		Optional<Room> room=roomRepository.findById(roomId);
		if(room.isPresent()) {
			room.get().getPlayers().forEach(players::add);
			return players;
		}
		throw new IllegalStateException("Room Not Found!");
	}

	public ResponseEntity<?> addPlayer(Player player) {
		String name=player.getName();
		Room room=player.getRoom();
		if(playerRepository.findByName(name).isPresent()) {
			throw new DuplicateException("A Player with duplicate name is found!");
		}
		playerRepository.save(player);
		return ResponseEntity.status(HttpStatus.OK).body("Player: "+player.getName()+" added successfully!");
	}

	public ResponseEntity<?> deletePlayer(String name) {
			Optional<Player> player =playerRepository.findByName(name);
			if(player.isPresent()) {
			playerRepository.deleteById(player.get().getPlayerId());
			return ResponseEntity.status(HttpStatus.OK).body("Player has been deleted successfully!");
		}
		throw new NotFoundException("No Player Found with name: "+name+" !");
	}

}
